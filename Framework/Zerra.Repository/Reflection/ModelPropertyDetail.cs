// Copyright © KaKush LLC
// Written By Steven Zawaski
// Licensed to you under the MIT license

using System;
using System.Linq;
using System.Reflection;
using Zerra.Reflection;

namespace Zerra.Repository.Reflection
{
    public sealed class ModelPropertyDetail
    {
        public MemberInfo MemberInfo { get; }
        public bool IsDataSourceEntity { get; }

        public string Name { get; }
        public Type Type { get; }
        public CoreType? CoreType { get; }
        public string PropertySourceName { get; }
        public bool IsIdentity { get; } //Usually maps to DB PrimaryKey
        public bool IsIdentityAutoGenerated { get; } //Usually maps to DB Identity Specification (Auto Increment)
        public bool IsRelated { get; }
        public string? ForeignIdentity { get; }
        public bool IsEnumerable { get; }
        public bool IsNullable { get; }
        public Type InnerType { get; }
        public CoreType? InnerCoreType { get; }
        public bool IsDataSourceNotNull { get; }
        public int? DataSourcePrecisionLength { get; }
        public int? DataSourceScale { get; }
        public StoreTextEncoding TextEncoding { get; }
        public StoreDatePart DatePart { get; }

        public Func<object, object?> Getter { get; }
        public Action<object, object?> Setter { get; }

        public object CoreTypeSetter { get; }

        public override string ToString()
        {
            return $"{Type.Name} {Name}";
        }

        internal ModelPropertyDetail(MemberDetail memberDetail, bool declaringTypeIsDataSourceEntity)
        {
            this.MemberInfo = memberDetail.MemberInfo;

            this.Name = memberDetail.Name;
            this.Type = memberDetail.Type;
            this.CoreType = memberDetail.TypeDetail.CoreType;
            this.IsNullable = memberDetail.TypeDetail.IsNullable;
            this.IsEnumerable = memberDetail.TypeDetail.IsIEnumerable;
            this.InnerType = memberDetail.TypeDetail.InnerTypes?.Count > 0 ? memberDetail.TypeDetail.InnerTypes[0] : memberDetail.TypeDetail.Type;
            this.InnerCoreType = memberDetail.TypeDetail.InnerTypes?.Count > 0 ? memberDetail.TypeDetail.InnerTypeDetails[0].CoreType : memberDetail.TypeDetail.CoreType;

            var sourcePropertyAttribute = memberDetail.Attributes.Select(x => x as StoreNameAttribute).Where(x => x != null).FirstOrDefault();
            var storeName = sourcePropertyAttribute?.StoreName;
            if (String.IsNullOrWhiteSpace(storeName))
                storeName = memberDetail.Name;
            if (!storeName.All(x => Char.IsLetterOrDigit(x) || x == '_' || x == '`'))
                throw new ArgumentException($"{nameof(StoreNameAttribute)}.{nameof(StoreNameAttribute.StoreName)}={storeName}");
            this.PropertySourceName = storeName;

            IdentityAttribute? identityAttribute = null;
            RelationAttribute? foreignIdentityAttribute = null;
            if (declaringTypeIsDataSourceEntity)
            {
                identityAttribute = memberDetail.Attributes.Select(x => x as IdentityAttribute).Where(x => x != null).FirstOrDefault();
                foreignIdentityAttribute = memberDetail.Attributes.Select(x => x as RelationAttribute).Where(x => x != null).FirstOrDefault();
            }
            this.IsIdentity = identityAttribute != null;
            this.ForeignIdentity = foreignIdentityAttribute?.ForeignIdentity;
            this.IsIdentityAutoGenerated = identityAttribute != null && identityAttribute.AutoGenerated;
            this.IsRelated = foreignIdentityAttribute != null;

            var entityAttribute = memberDetail.TypeDetail.Attributes.Select(x => x as EntityAttribute).Where(x => x != null).FirstOrDefault();
            this.IsDataSourceEntity = entityAttribute != null;

            var storePropertyAttribute = memberDetail.Attributes.Select(x => x as StorePropertiesAttribute).Where(x => x != null).FirstOrDefault();
            this.IsDataSourceNotNull = storePropertyAttribute != null ? storePropertyAttribute.NotNull : (InnerType.IsValueType && !memberDetail.TypeDetail.IsNullable);
            this.DataSourcePrecisionLength = storePropertyAttribute != null ? storePropertyAttribute.PrecisionLength : null;
            this.DataSourceScale = storePropertyAttribute != null ? storePropertyAttribute.Scale : null;
            this.TextEncoding = storePropertyAttribute != null ? storePropertyAttribute.TextEncoding : StoreTextEncoding.Unicode;
            this.DatePart = storePropertyAttribute != null ? storePropertyAttribute.DatePart : StoreDatePart.DateTime;

            if (!this.IsDataSourceNotNull && this.IsIdentity)
                throw new Exception($"{this.Type.GetNiceName()} {this.Name} cannot be both an identity and nullable");

            this.Getter = memberDetail.Getter;
            this.Setter = memberDetail.Setter;

            this.CoreTypeSetter = CoreTypeSetterGenerator.Get(this.MemberInfo, this.CoreType, this.Type.IsArray && this.InnerCoreType == Zerra.Reflection.CoreType.Byte);
        }
    }
}
