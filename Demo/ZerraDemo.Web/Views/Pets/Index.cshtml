@{
    ViewData["Title"] = "Pets";
}

<div class="text-center">
    <h1 class="display-4">Pets</h1>
</div>

<a class="btn btn-primary" asp-controller="Pets" asp-action="Adopt">Adopt</a>
<br />
<br />
<div id="pets">
    <table class="table">
        <tr>
            <th>Name</th>
            <th>Breed</th>
            <th>Species</th>
            <th>Last Eaten</th>
            <th>Amount Eaten</th>
            <th>Last Pooped</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        <tr v-for="model in models">
            <td>{{model.Name}}</td>
            <td>{{model.Breed}}</td>
            <td>{{model.Species}}</td>
            <td>{{model.LastEaten|date}}</td>
            <td>{{model.AmountEaten}}</td>
            <td>{{model.LastPooped|date}}</td>
            <td><button class="btn btn-primary" v-on:click="status(model)">Status</button></td>
            <td><button class="btn btn-primary" v-on:click="feed(model)">Feed</button></td>
            <td><button class="btn btn-primary" v-on:click="poop(model)">Let Out To Poop</button></td>
        </tr>
    </table>
</div>

@section Scripts{
    <script type="text/javascript">
        $(function () {

            Vue.filter('date', function (value) {
                if (value) {
                    var d = new Date(value);
                    return ((d.getMonth() + 1) < 10 ? "0" : "") + (d.getMonth() + 1) + "/" + (d.getDate() < 10 ? "0" : "") + d.getDate() + "/" + d.getFullYear() + " " + (d.getHours() < 10 ? "0" : "") + d.getHours() + ":" + (d.getMinutes() < 10 ? "0" : "") + d.getMinutes();
                }
            });

            const petsVue = new Vue({
                el: "#pets",
                data: {
                    models: []
                },
                methods: {
                    status: function (model) {
                        let completed = 0;
                        let isHungry = false;
                        let needsToPoop = false;
                        const onComplete = function () {
                            completed++;
                            if (completed == 2) {
                                alert(model.Name + " " + (isHungry ? "Is Hungry" : "Is Full") + " and " + (needsToPoop ? "Needs to Poop" : "Doesn't Need to Poop"));
                            }
                        };
                        IPetsQueryProvider.IsHungry(model.ID, function (data) {
                            isHungry = data;
                            onComplete();
                        });
                        IPetsQueryProvider.NeedsToPoop(model.ID, function (data) {
                            needsToPoop = data;
                            onComplete();
                        });
                    },
                    feed: function (model) {
                        const command = new FeedPetCommand({
                            PetID: model.ID,
                            Amount: 1
                        });
                       Bus.DispatchAwait(command, function (result) {
                            alert("Pet Food Sent to " + model.Name + ", Amount Eaten: " + result.AmountEaten);
                            loadData();
                        });
                    },
                    poop: function (model) {
                        const command = new LetPetOutToPoopCommand({
                            PetID: model.ID,
                        });
                       Bus.DispatchAwait(command, function () {
                            alert(model.Name + " has gone out to poop.");
                            loadData();
                        }, function (errorText) {
                            alert(errorText);
                        });
                    }
                }
            });
            function loadData() {
                IPetsQueryProvider.GetPets(function (models) {
                    petsVue.models = models;
                });
            }
            loadData();
        });
    </script>
}
